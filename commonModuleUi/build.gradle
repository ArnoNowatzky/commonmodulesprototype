import org.gradle.api.JavaVersion

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url "https://repo.intra.vsa.de/artifactory/maven/" }
    }

    dependencies {
        classpath 'de.vsa.gradle:vsareleasemaven:6.101'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.4.1'
        classpath 'org.openapitools:openapi-generator-gradle-plugin:4.3.1'
    }
}

plugins {
    id 'com.bmuschko.docker-spring-boot-application' version '6.6.1'
    id "com.github.node-gradle.node" version "2.2.4"
}

repositories {
    mavenCentral()
}

group = 'de.noventi.cm'
version = '0.1'


apply {
    plugin 'java-library'
    plugin 'org.openapi.generator'
    plugin 'org.springframework.boot'
    plugin 'io.spring.dependency-management'
    plugin 'vsa.releasemaven'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11


ext.lombokVersion = '1.18.6'


dependencies {

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.openapitools:jackson-databind-nullable:0.2.1' //TODO unused import, check how to get rid of

    compile 'org.springframework.boot:spring-boot-starter-web'
    //compile 'org.springframework.boot:spring-boot-starter-security'

    //TODO discuss compile 'org.springframework.boot:spring-boot-starter-actuator'

    compile 'io.swagger:swagger-annotations:1.5.22'
    compile 'javax.validation:validation-api:2.0.1.Final'


    runtime 'ch.qos.logback:logback-core:1.2.3'
    runtime 'ch.qos.logback:logback-classic:1.2.3'
    runtime 'org.postgresql:postgresql:42.2.18'

    testCompile('org.springframework.boot:spring-boot-starter-test:2.4.0')
    testCompile('org.junit.jupiter:junit-jupiter-engine:5.2.0')
}

springBoot {
    mainClassName = 'de.noventi.cm.ui.UiApplication'
}

bootJar {
    archiveBaseName = 'ui'
}

jar {
    archiveBaseName = 'ui'
}

openApiGenerate {
    generatorName = "spring"
    library = "spring-boot"
    inputSpec = file('../api/src/main/resources/api/service/service.yaml').toString()
    outputDir = "$buildDir/generated/openapi".toString()
    apiPackage = "de.noventi.cm.ui.api"
    modelPackage = "de.noventi.cm.ui.model"
    configOptions = [
            dateLibrary: "java8-localdatetime",
            java8: "true",
            useBeanValidation: "true",
            interfaceOnly: "true",
            useOptional: "true",
            useLombok: "true"
    ]
}

tasks.create("openApiGenerateClient", org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class, {
  //verbose = true
  generatorName = "typescript-angular"
  inputSpec = file('../api/src/main/resources/api/service/service.yaml').toString()
  outputDir = "$projectDir/src/app/generated".toString()
  apiPackage = "api"
  modelPackage = "model"
  invokerPackage = "api"
})

node {
    download = true
    version = '14.15.1'
}

task buildClient(type: NpxTask) {
    dependsOn npmInstall
    command = 'ng'
    args = ['build']
    inputs.files('package.json', 'package-lock.json', 'angular.json', 'tsconfig.json', 'tsconfig.app.json')
    inputs.dir('src')
    inputs.dir(fileTree("node_modules").exclude(".cache"))
    outputs.dir('dist')
}
buildClient.dependsOn tasks.openApiGenerateClient

sourceSets {
    main {
        java {
            srcDir("$buildDir/generated/openapi/src/main/java")
        }
        resources {
            srcDir ("dist")
        }
    }
}


tasks.compileJava.dependsOn tasks.openApiGenerate

println "Docker user = " + project.properties['awinta_dockerUser']

docker {
    registryCredentials {
        url = 'https://awinta-docker.intra.vsa.de/'
        username = project.properties['awinta_dockerUser']
        password = project.properties['awinta_dockerPassword']
    }
    springBootApplication {
        baseImage = 'openjdk:14'
        ports = [8003]
        images = ["awinta-docker.intra.vsa.de/noventi.cm/ui:${jar.archiveVersion.get()}"]
    }
}

tasks.dockerBuildImage.dependsOn classes, bootJar

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf {
            it.buildDependencies.getDependencies(null).contains(jar)
        }
        it.outgoing.artifact(bootJar)
    }
}

test {
    useJUnitPlatform()
}
