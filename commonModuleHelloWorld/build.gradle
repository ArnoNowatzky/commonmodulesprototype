plugins {
    id 'com.google.cloud.tools.jib' version '2.6.0'
}

apply {
    plugin 'java-library'
    plugin 'org.springframework.boot'
    plugin 'io.spring.dependency-management'
    plugin 'vsa.releasemaven'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11


ext.lombokVersion = '1.18.6'


dependencies {

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compile 'org.springframework.boot:spring-boot-starter-web'
    //TODO compile 'org.springframework.boot:spring-boot-starter-security'

    compile 'io.swagger:swagger-annotations:1.5.22'
    compile 'javax.validation:validation-api:2.0.1.Final'

    //TODO discuss compile 'org.springframework.boot:spring-boot-starter-actuator'

    runtime 'ch.qos.logback:logback-core:1.2.3'
    runtime 'ch.qos.logback:logback-classic:1.2.3'

}

springBoot {
    mainClassName = 'de.noventi.cm.hello.HelloWorldApplication'
}

String dockerUser = project.properties['awinta_dockerUser']
String dockerPwd = project.properties['awinta_dockerPassword']

println "Docker user = " + dockerUser
println "Docker pwd = " + dockerPwd

jib {
    to {
        image = project.provider {"awinta-docker.intra.vsa.de/noventi.cm/commonmoduleservice:" + version}
        auth {
            username = dockerUser
            password = dockerPwd
        }

    }
    from {
        image = 'docker.intra.vsa.de/amazoncorretto:11.0.9-alpine'
        auth {
            username = dockerUser
            password = dockerPwd
        }
    }
    container {
        mainClass = 'de.noventi.cm.service.ServiceApplication'
        environment = ['SPRING_DATASOURCE_URL':'jdbc:postgresql://postgresql:5432/service',
                       'ACTIVE-MQ_BROKER-URL':'tcp://activemq:61616']
        ports = ['8002/tcp']
    }
}

//TODO https://stackoverflow.com/questions/61197984/bootjar-mavenjar-artifact-wasnt-produced-by-this-build
configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf {
            it.buildDependencies.getDependencies(null).contains(jar)
        }
        it.outgoing.artifact(bootJar)
    }
}

test {
    useJUnitPlatform()
}

tasks.jibDockerBuild.dependsOn classes, bootJar
tasks.build.dependsOn tasks.releaseLocalSnapshot
tasks.build.dependsOn tasks.jibDockerBuild