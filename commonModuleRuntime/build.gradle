apply {
    plugin 'java-library'
    plugin 'org.openapi.generator'
    plugin 'org.springframework.boot'
    plugin 'io.spring.dependency-management'
    plugin 'vsa.releasemaven'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

ext.lombokVersion = '1.18.6'
ext.jaxbVersion = '2.3.0'
ext.resteasyVersion = '3.12.1.Final'
ext.keycloakVersion = '12.0.2'
ext['junit-jupiter.version'] = '5.3.2' //TODO: workarounds error in newer version

dependencies {

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.openapitools:jackson-databind-nullable:0.2.1' //TODO unused import, check how to get rid of

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-jdbc'
    compile 'org.springframework.boot:spring-boot-starter-activemq'
    //TODO compile 'org.springframework.boot:spring-boot-starter-security'

    compile 'com.github.docker-java:docker-java-core:3.2.7'
    compile 'com.github.docker-java:docker-java-transport-zerodep:3.2.7'

    compile 'io.swagger:swagger-annotations:1.5.22'
    compile 'javax.validation:validation-api:2.0.1.Final'

    compile 'commons-io:commons-io:2.7'
    compile 'org.apache.commons:commons-lang3:3.11'

    runtime 'ch.qos.logback:logback-core:1.2.3'
    runtime 'ch.qos.logback:logback-classic:1.2.3'
    runtime 'org.postgresql:postgresql:42.2.18'
    runtime 'com.h2database:h2' //TODO make keycloak use postgres

    //JAXB
    compile 'com.sun.activation:javax.activation:1.2.0'
    compile "javax.xml.bind:jaxb-api:${jaxbVersion}"
    compile "com.sun.xml.bind:jaxb-core:${jaxbVersion}"
    compile "com.sun.xml.bind:jaxb-impl:${jaxbVersion}"

    //Keycloak
    compile "org.jboss.resteasy:resteasy-jackson2-provider:${resteasyVersion}"
    compile ("org.keycloak:keycloak-dependencies-server-all:${keycloakVersion}") {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
    }

    testCompile('org.springframework.boot:spring-boot-starter-test:2.4.0')

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    runtime 'org.postgresql:postgresql:42.2.16.jre7'

}

springBoot {
    mainClassName = 'de.noventi.cm.runtime.RuntimeApplication'
}

openApiGenerate {
    generatorName = "spring"
    library = "spring-boot"
    inputSpec = file('../api/src/main/resources/api/runtime/runtime.yaml').toString()
    outputDir = "$buildDir/generated/openapi".toString()
    apiPackage = "de.noventi.cm.runtime.api"
    modelPackage = "de.noventi.cm.runtime.model"
    configOptions = [
            dateLibrary: "java8-localdatetime",
            java8: "true",
            useBeanValidation: "true",
            interfaceOnly: "true",
            useOptional: "true",
            useLombok: "true"
    ]
}

sourceSets {
    main {
        java {
            srcDir("$buildDir/generated/openapi/src/main/java")
        }
    }
}

tasks.compileJava.dependsOn tasks.openApiGenerate
tasks.bootRun.dependsOn rootProject.getTasksByName('releaseLocalSnapshot', true)
tasks.bootRun.dependsOn rootProject.getTasksByName('dockerBuildImage', true)

//TODO https://stackoverflow.com/questions/61197984/bootjar-mavenjar-artifact-wasnt-produced-by-this-build
configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf {
            it.buildDependencies.getDependencies(null).contains(jar)
        }
        it.outgoing.artifact(bootJar)
    }
}

task copyDependencies(type: Copy) {
    destinationDir libsDir
    from configurations.runtime
}

task javapackager(type: Exec, dependsOn: [assemble, copyDependencies]) {
    def nativeType
    if (System.properties['os.name'].toLowerCase().contains('windows'))
        nativeType = 'msi'
    if (System.properties['os.name'].toLowerCase().contains('mac'))
        nativeType = 'dmg'
    if (System.properties['os.name'].toLowerCase().contains('linux'))
        nativeType = 'rpm'

    def dependencies = []
    configurations.runtime.forEach({ file ->
        dependencies.add('-srcfiles')
        dependencies.add(file.getName())
    })

    workingDir project.projectDir
    commandLine = [
            'javapackager',
            '-deploy',
            '-nosign',
            '-native', nativeType,
            '-outdir', "${buildDir}/distribution",
            '-outfile', project.name,
            '-name', 'Application Seed',
            '-appclass', springBoot.mainClassName,
            '-srcdir', libsDir,
            '-srcfiles', jar.archiveName
    ] + dependencies
}

test {
    useJUnitPlatform()
}

tasks.build.dependsOn tasks.releaseLocalSnapshot