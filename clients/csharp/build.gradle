buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath 'org.openapitools:openapi-generator-gradle-plugin:4.3.1'
    }
}



repositories {
    mavenCentral()
}
apply {
    plugin 'base'
    plugin 'org.openapi.generator'
}

ext.lombokVersion = '1.18.6'

File[] openApiInputs = [project.file('../../api/src/main/resources/api/service/service.yaml').absoluteFile,
                        project.file('../../api/src/main/resources/api/runtime/runtime.yaml').absoluteFile]
// Iterate on all swagger files and generate a task for each one with the nomenclature openApiGenerate + swagger name
openApiInputs.each {File it->
    println it.class
    def apiName = it.getName().replace(".yaml", "");

    def openApiGenerateTask = tasks.create("openApiGenerate" + apiName.capitalize(), org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class, {
        //verbose = true
        generatorName = "csharp"
        inputSpec = it.absolutePath
        outputDir = "$buildDir/generated/openapi"
        apiPackage = "Api"
        modelPackage = "Model"
        packageName = "De.Noventi.Cm.Client.Csharp." + apiName.capitalize()

    })

    openApiGenerateTask.outputs.upToDateWhen { false }
    openApiGenerateTask.outputs.cacheIf { false }
    tasks.build.dependsOn openApiGenerateTask
}
