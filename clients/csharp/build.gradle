buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath 'org.openapitools:openapi-generator-gradle-plugin:4.3.1'
    }
}



repositories {
    mavenCentral()
}
apply {
    plugin 'base'
    plugin 'org.openapi.generator'
}

ext.lombokVersion = '1.18.6'

def dir = project.file("../../api/".toString())
def openApiInputs = []
dir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
    if (file.getName().endsWith(".yaml"))
        openApiInputs << file
}



// Iterate on all swagger files and generate a task for each one with the nomenclature openApiGenerate + swagger name
openApiInputs.each {
    def apiName = it.getName().replace(".yaml", "");

    def openApiGenerateTask = tasks.create("openApiGenerate" + apiName.capitalize(), org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class, {
        //verbose = true
        generatorName = "csharp"
        inputSpec = file("../../api/" + apiName + ".yaml").toString()
        outputDir = "$buildDir/generated/openapi/".toString()
        apiPackage = "de.noventi.cm.client.csharp." + apiName + ".api"
        modelPackage = "de.noventi.cm.client.csharp." + apiName + ".model"

    })

    openApiGenerateTask.outputs.upToDateWhen { false }
    openApiGenerateTask.outputs.cacheIf { false }
    tasks.build.dependsOn openApiGenerateTask
}
