{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/generatedWawi/encoder.ts","webpack:///src/app/generatedCm/variables.ts","webpack:///src/app/generatedWawi/model/models.ts","webpack:///src/app/generatedCm/model/medicationDTO.ts","webpack:///src/app/generatedWawi/api/pharmacy.service.ts","webpack:///src/app/generatedWawi/configuration.ts","webpack:///src/app/generatedCm/model/models.ts","webpack:///src/app/generatedCm/encoder.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/generatedCm/index.ts","webpack:///src/app/generatedCm/api/medications.service.ts","webpack:///src/app/generatedWawi/model/pharmacyDTO.ts","webpack:///src/app/generatedWawi/index.ts","webpack:///src/app/app.module.ts","webpack:///src/app/generatedWawi/api.module.ts","webpack:///src/app/generatedCm/configuration.ts","webpack:///src/app/generatedCm/api/api.ts","webpack:///src/app/generatedWawi/api/api.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/generatedWawi/variables.ts","webpack:///src/app/generatedCm/api.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","API_BASE_PATH_CM","API_BASE_PATH_WAWI","CustomHttpParameterCodec","k","encodeURIComponent","v","decodeURIComponent","BASE_PATH","COLLECTION_FORMATS","PharmacyService","httpClient","basePath","configuration","defaultHeaders","encoder","httpParams","value","key","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Error","Object","keys","observe","reportProgress","options","headers","httpHeaderAcceptSelected","httpHeaderAccept","undefined","httpHeaderAccepts","selectHeaderAccept","set","responseType","startsWith","get","withCredentials","providedIn","Configuration","configurationParameters","apiKeys","username","password","accessToken","contentTypes","length","type","find","x","isJsonMime","accepts","mime","jsonMime","RegExp","test","toLowerCase","AppComponent","medicationsService","pharmacyService","title","displayedColumns","medicationContainers","pharmacyInfo","console","log","getMedicationContainers","subscribe","err","error","message","getPharmacyInfo","selector","templateUrl","styleUrls","MedicationsService","consumerId","String","containerId","medicationcontainerDTO","consumes","httpContentTypeSelected","selectHeaderContentType","put","AppModule","provide","useValue","declarations","imports","providers","bootstrap","ApiModule","parentModule","http","configurationFactory","ngModule","useFactory","exports","APIS","routes","AppRoutingModule","forRoot","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","e","code","module","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  API_BASE_PATH_CM: \"https://localhost:8002\",\n  API_BASE_PATH_WAWI: \"https://localhost:8003\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export * from './pharmacyDTO';\n","/**\n * medication plans api\n * API of service example medication plans\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface MedicationDTO { \n    /**\n     * technial ID\n     */\n    id?: string;\n    /**\n     * pharmacode\n     */\n    pharmacode?: string;\n    /**\n     * name of the medication\n     */\n    name?: string;\n}\n\n","/**\n * WAWI api\n * API of WAWI\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { PharmacyDTO } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PharmacyService {\n\n    protected basePath = 'http://localhost:8003/v1';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * returns infos of the current pharmacy\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPharmacyInfo(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PharmacyDTO>;\n    public getPharmacyInfo(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PharmacyDTO>>;\n    public getPharmacyInfo(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PharmacyDTO>>;\n    public getPharmacyInfo(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PharmacyDTO>(`${this.configuration.basePath}/pharmacy`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","export * from './medicationDTO';\nexport * from './medicationcontainerDTO';\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n\n","import { Component, OnInit } from '@angular/core';\nimport {MedicationcontainerDTO, MedicationDTO, MedicationsService} from \"./generatedCm\";\nimport {PharmacyDTO, PharmacyService} from \"./generatedWawi\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent  {\n  title = 'client';\n\n  displayedColumns: string[] = ['id', 'name'];\n\n  medicationContainers: MedicationcontainerDTO[] = [];\n  pharmacyInfo: PharmacyDTO = {};\n\n  constructor(private medicationsService: MedicationsService, private pharmacyService: PharmacyService) {\n    console.log(\"Call medicationcontainers\")\n    this.medicationsService.getMedicationContainers().subscribe(\n      x => this.medicationContainers = x,\n      err => console.error('Observer got an error: ' + err.message),\n      () => console.error('Observer finished'),\n    );\n\n    console.log(\"Call pharmacyinfos\")\n    this.pharmacyService.getPharmacyInfo().subscribe(\n        x => this.pharmacyInfo = x,\n        err => console.error('Observer got an error: ' + err.message),\n        () => console.error('Observer finished'),\n    );\n  }\n\n\n}\n","TODO migrate from material to primeng <br><br>\n\n<h2>Data from WAWI</h2>\nPharmacyname: '{{pharmacyInfo.name}}' <br>\n\n<div *ngIf=\"medicationContainers\">\n    <h2>Data from own CM</h2>\n    <table>\n        <thead>\n        <th>ID</th>\n        <th>Name</th>\n        <th>First name</th>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let medication of medicationContainers\">\n            <td>{{medication.id}}</td>\n            <td>{{medication.consumerName}}</td>\n            <td>{{medication.consumerFirstname}}</td>\n        </tr>\n        </tbody>\n    </table>\n</div>","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * medication plans api\n * API of service example medication plans\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { MedicationcontainerDTO } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MedicationsService {\n\n    protected basePath = 'http://localhost:8002/v1';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * returns the medication containers of the parameterized medication consumer\n     * @param consumerId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public findMedicationContainersByConsumer(consumerId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<MedicationcontainerDTO>>;\n    public findMedicationContainersByConsumer(consumerId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<MedicationcontainerDTO>>>;\n    public findMedicationContainersByConsumer(consumerId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<MedicationcontainerDTO>>>;\n    public findMedicationContainersByConsumer(consumerId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (consumerId === null || consumerId === undefined) {\n            throw new Error('Required parameter consumerId was null or undefined when calling findMedicationContainersByConsumer.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<MedicationcontainerDTO>>(`${this.configuration.basePath}/medicationcontainers/findByCustomerId/${encodeURIComponent(String(consumerId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * returns medication container with the parameterized containerId\n     * @param containerId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getMedicationContainer(containerId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<MedicationcontainerDTO>;\n    public getMedicationContainer(containerId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<MedicationcontainerDTO>>;\n    public getMedicationContainer(containerId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<MedicationcontainerDTO>>;\n    public getMedicationContainer(containerId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (containerId === null || containerId === undefined) {\n            throw new Error('Required parameter containerId was null or undefined when calling getMedicationContainer.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<MedicationcontainerDTO>(`${this.configuration.basePath}/medicationcontainers/${encodeURIComponent(String(containerId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * returns all medication containers\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getMedicationContainers(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<MedicationcontainerDTO>>;\n    public getMedicationContainers(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<MedicationcontainerDTO>>>;\n    public getMedicationContainers(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<MedicationcontainerDTO>>>;\n    public getMedicationContainers(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<MedicationcontainerDTO>>(`${this.configuration.basePath}/medicationcontainers`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * updates the medication container with the parameterized containerId\n     * @param containerId \n     * @param medicationcontainerDTO updated container\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public updateMedicationContainer(containerId: string, medicationcontainerDTO: MedicationcontainerDTO, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public updateMedicationContainer(containerId: string, medicationcontainerDTO: MedicationcontainerDTO, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public updateMedicationContainer(containerId: string, medicationcontainerDTO: MedicationcontainerDTO, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public updateMedicationContainer(containerId: string, medicationcontainerDTO: MedicationcontainerDTO, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (containerId === null || containerId === undefined) {\n            throw new Error('Required parameter containerId was null or undefined when calling updateMedicationContainer.');\n        }\n        if (medicationcontainerDTO === null || medicationcontainerDTO === undefined) {\n            throw new Error('Required parameter medicationcontainerDTO was null or undefined when calling updateMedicationContainer.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/medicationcontainers/${encodeURIComponent(String(containerId))}`,\n            medicationcontainerDTO,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","/**\n * WAWI api\n * API of WAWI\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PharmacyDTO { \n    /**\n     * Liste von Institutionskennzeichen {ik_nr} der Apotheke.\n     */\n    ik_nr?: Array<string>;\n    /**\n     * Liste von BGA (IDF)-Nummern {bga_nr} der Apotheke.\n     */\n    bga_nr?: Array<string>;\n    /**\n     * Ist die von der NGDA im Rahmen von N-Ident vergebene Apothekennummer und dient der eindeutigen Identifizierung einer Betriebsst�tte.\n     */\n    apo_nr?: string;\n    /**\n     * Name der Apotheke\n     */\n    name?: string;\n    /**\n     * Name des Inhabers\n     */\n    inhaber?: string;\n}\n\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatInputModule} from '@angular/material/input';\n\n\nimport {environment} from '../environments/environment';\nimport {HttpClientModule} from '@angular/common/http';\nimport {MatOptionModule} from '@angular/material/core';\nimport {MatSelectModule} from '@angular/material/select';\nimport {BASE_PATH as BASE_PATH_CM} from './generatedCm';\nimport {BASE_PATH as BASE_PATH_WAWI} from './generatedWawi';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    NoopAnimationsModule,\n    MatGridListModule,\n    MatTableModule,\n    MatInputModule,\n    MatOptionModule,\n    MatSelectModule,\n\n    HttpClientModule\n  ],\n  providers: [{\n      provide: BASE_PATH_CM,\n      useValue: environment.API_BASE_PATH_CM\n    }, {\n      provide: BASE_PATH_WAWI,\n      useValue: environment.API_BASE_PATH_WAWI\n    },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { PharmacyService } from './api/pharmacy.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","export * from './medications.service';\nimport { MedicationsService } from './medications.service';\nexport const APIS = [MedicationsService];\n","export * from './pharmacy.service';\nimport { PharmacyService } from './pharmacy.service';\nexport const APIS = [PharmacyService];\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { MedicationsService } from './api/medications.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}