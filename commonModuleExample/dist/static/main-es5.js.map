{"version":3,"sources":["webpack:///src/app/generated/api/api.ts","webpack:///src/app/generated/index.ts","webpack:///src/app/generated/api/customer.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/generated/configuration.ts","webpack:///src/app/generated/api.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/generated/model/phoneDTO.ts","webpack:///src/app/generated/model/addressDTO.ts","webpack:///src/app/app.module.ts","webpack:///src/app/generated/encoder.ts","webpack:///src/app/generated/model/models.ts","webpack:///src/app/generated/variables.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["APIS","CustomerService","httpClient","basePath","configuration","defaultHeaders","encoder","httpParams","value","key","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Error","Object","keys","k","customerId","observe","reportProgress","options","undefined","headers","httpHeaderAcceptSelected","httpHeaderAccept","httpHeaderAccepts","selectHeaderAccept","set","responseType","startsWith","get","encodeURIComponent","String","withCredentials","customerDTO","consumes","httpContentTypeSelected","selectHeaderContentType","put","providedIn","environment","production","API_BASE_PATH","Configuration","configurationParameters","apiKeys","username","password","accessToken","contentTypes","length","type","find","x","isJsonMime","accepts","mime","jsonMime","RegExp","test","toLowerCase","ApiModule","parentModule","http","configurationFactory","ngModule","providers","provide","useFactory","imports","declarations","exports","AppComponent","softwareService","title","displayedColumns","dataSource","getCustomers","subscribe","err","console","error","selector","templateUrl","styleUrls","AppModule","useValue","bootstrap","CustomHttpParameterCodec","v","decodeURIComponent","BASE_PATH","COLLECTION_FORMATS","routes","AppRoutingModule","forRoot","bootstrapModule","webpackEmptyAsyncContext","req","Promise","resolve","then","e","code","module","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["export * from './customer.service';\nimport { CustomerService } from './customer.service';\nexport const APIS = [CustomerService];\n","export * from './api/api';\nexport * from './model/models';\nexport * from './variables';\nexport * from './configuration';\nexport * from './api.module';","/**\n * customer api\n * API of service example customer\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { CustomerDTO } from '../model/models';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n\n    protected basePath = 'http://localhost:8002';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * @param customerId \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCustomer(customerId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<CustomerDTO>;\n    public getCustomer(customerId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<CustomerDTO>>;\n    public getCustomer(customerId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<CustomerDTO>>;\n    public getCustomer(customerId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        if (customerId === null || customerId === undefined) {\n            throw new Error('Required parameter customerId was null or undefined when calling getCustomer.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<CustomerDTO>(`${this.configuration.basePath}/customer/${encodeURIComponent(String(customerId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * returns all customers of the system\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getCustomers(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Array<CustomerDTO>>;\n    public getCustomers(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Array<CustomerDTO>>>;\n    public getCustomers(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Array<CustomerDTO>>>;\n    public getCustomers(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Array<CustomerDTO>>(`${this.configuration.basePath}/customer/findAll`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * @param customerDTO changed customer\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public setCustomer(customerDTO: CustomerDTO, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<any>;\n    public setCustomer(customerDTO: CustomerDTO, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpResponse<any>>;\n    public setCustomer(customerDTO: CustomerDTO, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined}): Observable<HttpEvent<any>>;\n    public setCustomer(customerDTO: CustomerDTO, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined}): Observable<any> {\n        if (customerDTO === null || customerDTO === undefined) {\n            throw new Error('Required parameter customerDTO was null or undefined when calling setCustomer.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.put<any>(`${this.configuration.basePath}/customer`,\n            customerDTO,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false, \n  API_BASE_PATH: \"http://localhost:8003\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { HttpParameterCodec } from '@angular/common/http';\n\nexport interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { CustomerService } from './api/customer.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: []\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders<ApiModule> {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CustomerDTO, CustomerService } from './generated';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent  {\n  title = 'client';\n\n  displayedColumns: string[] = ['id', 'name'];\n\n\n  dataSource: CustomerDTO[] = [];\n\n  constructor(private softwareService: CustomerService) {\n    this.softwareService.getCustomers().subscribe(\n      x => this.dataSource = x,\n      err => console.error('Observer got an error: ' + err),\n      () => console.error('Observer finished'),\n    );\n  }\n\n\n}\n","<mat-grid-list cols=\"2\">\n  <mat-grid-tile>\n    <table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef> ID </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.id}} </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n    </table>\n\n  </mat-grid-tile>\n  <mat-grid-tile>\n\n\n    <div class=\"example-container\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Input</mat-label>\n        <input matInput>\n      </mat-form-field>\n      <br>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Select</mat-label>\n        <mat-select>\n          <mat-option value=\"option\">Option</mat-option>\n        </mat-select>\n      </mat-form-field>\n      <br>\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Textarea</mat-label>\n        <textarea matInput></textarea>\n      </mat-form-field>\n    </div>\n  </mat-grid-tile>\n\n\n\n\n</mat-grid-list>","/**\n * customer api\n * API of service example customer\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface PhoneDTO { \n    number?: string;\n    phonetype?: string;\n}\n\n","/**\n * customer api\n * API of service example customer\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface AddressDTO { \n    id?: string;\n    address?: string;\n    postcode?: string;\n    city?: string;\n}\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatInputModule } from '@angular/material/input';\n\n\n\nimport { environment } from '../environments/environment';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatOptionModule } from '@angular/material/core';\nimport { MatSelectModule } from '@angular/material/select';\nimport { BASE_PATH } from './generated';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    NoopAnimationsModule,\n    MatGridListModule,\n    MatTableModule,\n    MatInputModule,\n    MatOptionModule,\n    MatSelectModule,\n\n    HttpClientModule\n  ],\n  providers: [{\n    provide: BASE_PATH,\n    useValue: environment.API_BASE_PATH\n  },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n\n","export * from './addressDTO';\nexport * from './customerDTO';\nexport * from './phoneDTO';\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}