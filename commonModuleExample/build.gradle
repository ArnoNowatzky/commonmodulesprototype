plugins {
    id 'com.google.cloud.tools.jib' version '2.6.0'
    id "com.github.node-gradle.node" version "2.2.4"
}


apply {
    plugin 'java-library'
    plugin 'org.openapi.generator'
    plugin 'org.springframework.boot'
    plugin 'io.spring.dependency-management'
    plugin 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11


ext.lombokVersion = '1.18.6'


dependencies {

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1' //TODO unused import, check how to get rid of

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-activemq'
    //TODO compile 'org.springframework.boot:spring-boot-starter-security'

    compile 'io.swagger:swagger-annotations:1.5.22'
    compile 'javax.validation:validation-api:2.0.1.Final'

    compile project(':commonModuleBase')

    //TODO discuss compile 'org.springframework.boot:spring-boot-starter-actuator'


    runtime 'ch.qos.logback:logback-core:1.2.3'
    runtime 'ch.qos.logback:logback-classic:1.2.3'
    runtime 'org.postgresql:postgresql:42.2.18'

    testCompile('org.springframework.boot:spring-boot-starter-test:2.4.0')
    testCompile('org.junit.jupiter:junit-jupiter-engine:5.2.0')
}

springBoot {
    mainClassName = 'de.noventi.cm.example.ExampleApplication'
}

bootJar {
    archiveBaseName = 'example'
}

jar {
    archiveBaseName = 'example'
}

openApiGenerate {
    generatorName = "spring"
    library = "spring-boot"
    inputSpec = file('../api/src/main/resources/api/example/example.yaml').toString()
    outputDir = "$buildDir/generated/openapi".toString()
    apiPackage = "de.noventi.cm.example.api"
    modelPackage = "de.noventi.cm.example.model"
    configOptions = [
            dateLibrary: "java8-localdatetime",
            java8: "true",
            useBeanValidation: "true",
            interfaceOnly: "true",
            useOptional: "true",
            useLombok: "true"
    ]
}

tasks.create("openApiGenerateClient", org.openapitools.generator.gradle.plugin.tasks.GenerateTask.class, {
  //verbose = true
  generatorName = "typescript-angular"
  inputSpec = file('../api/src/main/resources/api/service/service.yaml').toString()
  outputDir = "$projectDir/src/app/generated".toString()
  apiPackage = "api"
  modelPackage = "model"
  invokerPackage = "api"
})

node {
    download = true
    version = '14.15.1'
}

task buildClient(type: NpxTask) {
    dependsOn npmInstall
    command = 'ng'
    args = ['build']
    inputs.files('package.json', 'package-lock.json', 'angular.json', 'tsconfig.json', 'tsconfig.app.json')
    inputs.dir('src')
    inputs.dir(fileTree("node_modules").exclude(".cache"))
    outputs.dir('dist')
}
buildClient.dependsOn tasks.openApiGenerateClient

sourceSets {
    main {
        java {
            srcDir("$buildDir/generated/openapi/src/main/java")
        }
        resources {
            srcDir ("dist")
        }
    }
}


tasks.compileJava.dependsOn tasks.openApiGenerate

String dockerUser = project.properties['awinta_dockerUser']
String dockerPwd = project.properties['awinta_dockerPassword']

println "Docker user = " + dockerUser
println "Docker pwd = " + dockerPwd

jib {
    to {
        image = project.provider {"awinta-docker.intra.vsa.de/noventi.cm/commonmoduleexample:" + version}
        auth {
            username = dockerUser
            password = dockerPwd
        }

    }
    from {
        image = System.env['GIT_BRANCH'] == null ? 'amazoncorretto:11.0.11' : 'docker.intra.vsa.de/amazoncorretto:11.0.9-alpine'
    }

    container {
        mainClass = 'de.noventi.cm.example.ExampleApplication'
        environment = ['SPRING_DATASOURCE_URL':'jdbc:postgresql://postgresql:5432/service',
                       'ACTIVE-MQ_BROKER-URL':'tcp://activemq:61616']
        ports = ['8003/tcp']
    }
}



configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf {
            it.buildDependencies.getDependencies(null).contains(jar)
        }
        it.outgoing.artifact(bootJar)
    }
}

test {
    useJUnitPlatform()
}

tasks.jibDockerBuild.dependsOn classes, bootJar
tasks.build.dependsOn tasks.publishToMavenLocal
tasks.build.dependsOn tasks.jibDockerBuild
